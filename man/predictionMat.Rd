% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/StatCompR.R
\name{predictionMat}
\alias{predictionMat}
\title{predict}
\usage{
predictionMat(x, fitWeights, activationFun)
}
\arguments{
\item{x}{samples}

\item{fitWeights}{Trained weight}

\item{activationFun}{activation function}
}
\value{
prediction
}
\description{
input some samples , output predicted values
}
\examples{
\dontrun{
library(MASS)
samplesSelect<-sample(c(1:length(Boston[,1])),length(Boston[,1])*0.7)
trainData<-Boston[samplesSelect,]
testData<-Boston[-samplesSelect,]
trainX<-trainData[-which(colnames(Boston)=="medv")]
trainY<-trainData[which(colnames(Boston)=="medv")]
testX<-testData[-which(colnames(Boston)=="medv")]
testY<-testData[which(colnames(Boston)=="medv")]
trainX<-apply(trainX,2,function(x)scale(x,center=T,scale=T))
trainY<-scale(trainY,center=T,scale=T)
testX<-apply(testX,2,function(x)scale(x,center=T,scale=T))
testY<-scale(testY,center=T,scale=T)
initialWeights <- myNeuralNet(c(13,6,3,2,1),'tanh')
fitWeights<-training(trainX,trainY,0.001,initialWeights,'tanh',20000)
predictValues<-predictionMat(testX,initialWeights,'tanh')
}
}
